const t={allowOverlap:!0,caseSensitive:!1,removeWhiteSpaces:!1,wholeWords:!1};class e{constructor(t,e){this.start=t,this.end=e}isEqual(t){return this.start===t.start&&this.end===t.end}size(){return this.end-this.start+1}}class s extends e{constructor(t,e,s){super(t,e),this.start=t,this.end=e,this.keyword=s}}var r;!function(t){t.LEFT="Left",t.RIGHT="Right"}(r||(r={}));class i{constructor(t){this.segments=new Array,this.left=null,this.right=null,this.midPoint=this.getMidPoint(t);const e=[new Array,new Array];t.forEach((t=>{t.end<this.midPoint?e[0].push(t):t.start>this.midPoint?e[1].push(t):this.segments.push(t)})),e[0].length>0&&(this.left=new i(e[0])),e[1].length>0&&(this.right=new i(e[1]))}getOverlappingSegments(t){if(this.midPoint<t.start){return[...this.right?this.right.getOverlappingSegments(t):[],...this.getDirectionalOverlappingSegments(t,r.RIGHT)].filter((e=>!t.isEqual(e)))}if(t.end<this.midPoint){return[...this.left?this.left.getOverlappingSegments(t):[],...this.getDirectionalOverlappingSegments(t,r.LEFT)].filter((e=>!t.isEqual(e)))}{const e=this.right?this.right.getOverlappingSegments(t):[],s=this.left?this.left.getOverlappingSegments(t):[];return[...this.segments,...e,...s].filter((e=>!t.isEqual(e)))}}getDirectionalOverlappingSegments(t,e){return this.segments.filter((s=>{switch(e){case r.LEFT:return s.start<=t.end;case r.RIGHT:return s.end>=t.start}}))}getMidPoint(t){const e=[-1,-1];return t.forEach((t=>{(-1===e[0]||t.start<e[0])&&(e[0]=t.start),(-1===e[1]||t.end>e[1])&&(e[1]=t.end)})),Math.floor((e[0]+e[1])/2)}}class n{constructor(t){this._fail=null,this._match=[],this._success=new Map,this._depth=t}get failure(){return this._fail}set failure(t){this._fail=t}get depth(){return this._depth}get match(){return this._match}get successes(){return Array.from(this._success.values())}get transitions(){return Array.from(this._success.keys())}addMatch(t){this._match.push(...t)}nextState(t,e=!1){const s=this._success.get(t);return void 0!==s?s:!e&&this.root||null}addState(t){var e;const s=null!==(e=this.nextState(t,!0))&&void 0!==e?e:new n(this.depth+1);return this._success.set(t,s),s}get root(){return 0===this._depth?this:null}}class o{constructor(t){this.root=new i(t)}removeOverlappingSegments(t){const e=new Array,s=t.slice().sort(((t,e)=>e.size()-t.size()));for(const t of s)this.hasSegment(e,t)||e.push(...this.root.getOverlappingSegments(t).filter((t=>!this.hasSegment(e,t))));return t.slice().sort(((t,e)=>t.start-e.start)).filter((t=>!this.hasSegment(e,t)))}hasSegment(t,e){return t.some((t=>t.isEqual(e)))}}function a(t){return/^[a-zA-Z0-9]+$/.test(t)}function h(t){return null==t||""==t.trim()}class c{constructor(e,s){var r;this.failureStateConstructed=!1,this.root=new n(0),this.options=Object.assign(Object.assign({},t),s),e&&(void 0!==(r=e)&&Array.isArray(r)&&r.length>0)&&this.initialiseKeywords(e)}addKeyword(t){if(h(t))throw new Error("Provided string `keyword` is a null or empty string.");let e=this.root;const s=this.prepareKeywordForInsertion(t);for(let t=0;t<s.length;t++){const r=s.charAt(t);e=e.addState(r)}e.addMatch([s])}getMatches(t){this.checkForConstructedFailureStates();let e=this.root;const s=[];if(h(t))return s;for(let r=0;r<=t.length;r++){const i=this.options.caseSensitive?t.charAt(r):t.charAt(r).toLowerCase();e=this.getState(e,i),s.push(...this.toMatches(r,e))}return this.applyFilteringOptions(t,s)}getNonMatches(t){this.checkForConstructedFailureStates();const e=this.getMatches(t);e.sort(((t,e)=>t.start-e.start));const s=new Array;let r=0;for(const i of e)r<i.start&&s.push(t.slice(r,i.start)),r=i.end+1;return r<t.length&&s.push(t.slice(r)),s}getStringOccurrences(t){this.checkForConstructedFailureStates();const e=this.getMatches(t),s=new Map;for(const t of e){const e=t.keyword,r=s.get(e)||0;s.set(e,r+1)}return Array.from(s.entries()).map((([t,e])=>({keyword:t,occurrences:e})))}initialiseKeywords(t){const e=this.options.caseSensitive?t=>t:t=>t.toLowerCase(),s=this.options.removeWhiteSpaces?t=>t:t=>t.trim();t.forEach((t=>this.addKeyword(s(e(t)))))}prepareKeywordForInsertion(t){const e=t=>this.options.removeWhiteSpaces?t.trim():t;return e(e((t=>this.options.caseSensitive?t:t.toLowerCase())(t)))}applyFilteringOptions(t,e){const s=this.options.wholeWords?this.removePartialMatches(t,e):e;return this.options.allowOverlap?s:new o(s).removeOverlappingSegments(s)}getState(t,e){let s=t,r=t.nextState(e);for(;null===r;)s=s.failure,r=s.nextState(e);return r}checkForConstructedFailureStates(){this.failureStateConstructed||this.constructFailureStates()}constructFailureStates(){const t=[];for(this.root.failure=this.root,this.root.successes.forEach((e=>{e.failure=this.root,t.push(e)}));t.length>0;){const e=t.shift();e.transitions.forEach((s=>{const r=e.nextState(s);t.push(r);let i=e.failure;for(;null===i.nextState(s);)i=i.failure;const n=i.nextState(s);r.failure=n,r.addMatch(n.match)}))}this.failureStateConstructed=!0}removePartialMatches(t,e){const s=t.length;return e.filter((e=>!(0!==e.start&&a(t.charAt(e.start-1))||e.end+1!=s&&a(t.charAt(e.end+1)))))}toMatches(t,e){return e.match.map((e=>new s(t-e.length+1,t,e)))}}class l{constructor(){this.numberWords=["zero","one","two","three","four","five","six","seven","eight","nine","ten","eleven","twelve","thirteen","fourteen","fifteen","sixteen","seventeen","eighteen","nineteen","twenty","thirty","forty","fifty","sixty","seventy","eighty","ninety","hundred","thousand","million","billion","and","-","point","negative"],this.trie=new c(this.numberWords,{wholeWords:!0,caseSensitive:!1})}getNumbers(t){const e=this.getDigitNumbers(t),r=this.getNaturalNumbers(t),i=e.concat(r);i.sort(((t,e)=>t.start-e.start));const n=[];let o=null;for(let e=0;e<i.length;e++){const r=i[e];if(o){const e=t.slice(o.end+1,r.start);if(/^[\s\-,\.]*$/.test(e)){const t=o.start,i=r.end,n=o.keyword+e+r.keyword;o=new s(t,i,n)}else n.push(o),o=new s(r.start,r.end,r.keyword)}else o=new s(r.start,r.end,r.keyword)}return o&&n.push(o),n}getDigitNumbers(t){const e=t.match(/(-\d+|\d+)(,\d+)*(\.\d+)*/g),r=[];if(e)for(const i of e){const e=t.indexOf(i),n=e+i.length;r.push(new s(e,n,i))}return r}getNaturalNumbers(t){return this.trie.getMatches(t)}}export{l as NumberExtractor};
//# sourceMappingURL=index.esm.js.map
